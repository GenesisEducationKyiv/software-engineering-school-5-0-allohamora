services:
  pg:
    image: postgres:17.4
    environment:
      - POSTGRES_HOST=localhost
      - POSTGRES_PORT=5432
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=app
    ports:
      - 5432:5432
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql

  redis:
    image: redis:8.0.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass example
    volumes:
      - redis-data:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.15
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-secrets:/etc/zookeeper/secrets
      - zookeeper-log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.2.15
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:29092,PLAINTEXT_C://0.0.0.0:9093,PLAINTEXT_L://0.0.0.0:9092,
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:29092,PLAINTEXT_L://localhost:9092,PLAINTEXT_C://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_L:PLAINTEXT,PLAINTEXT_C:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-secrets:/etc/kafka/secrets

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  prometheus:
    image: prom/prometheus:v3.4.2
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  pushgateway:
    image: prom/pushgateway:v1.11.1
    ports:
      - "9091:9091"

  grafana:
    image: grafana/grafana:12.0.2
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana

  weather:
    build:
      context: .
      dockerfile: ./apps/weather/Dockerfile
    env_file:
      - ./apps/weather/.env
    environment:
      - NODE_ENV=production
      - PORT=4001
      - REDIS_URL=redis://:example@redis:6379/0
    ports:
      - 4001:4001
    depends_on:
      - redis
      - prometheus
    profiles:
      - production

  email:
    build:
      context: .
      dockerfile: ./apps/email/Dockerfile
    env_file:
      - ./apps/email/.env
    environment:
      - NODE_ENV=production
    profiles:
      - production

  subscription:
    build:
      context: .
      dockerfile: ./apps/subscription/Dockerfile
    env_file:
      - ./apps/subscription/.env
    environment:
      - NODE_ENV=production
      - PORT=4003
      - POSTGRES_URL=postgres://app:example@pg:5432/app
      - WEATHER_SERVICE_URL=http://weather:4001
      - EMAIL_SERVICE_URL=http://email:4002
    ports:
      - 4003:4003
    depends_on:
      - pg
      - weather
      - email
    profiles:
      - production

  notification:
    build:
      context: .
      dockerfile: ./apps/notification/Dockerfile
    env_file:
      - ./apps/notification/.env
    environment:
      - NODE_ENV=production
      - SUBSCRIPTION_SERVICE_URL=http://subscription:4003
    depends_on:
      - subscription
    profiles:
      - production

  gateway:
    build:
      context: .
      dockerfile: ./apps/gateway/Dockerfile
    env_file:
      - ./apps/gateway/.env
    environment:
      - NODE_ENV=production
      - WEATHER_SERVICE_URL=http://weather:4001
      - SUBSCRIPTION_SERVICE_URL=http://subscription:4003
      - PORT=3000
    ports:
      - 3000:3000
    depends_on:
      - weather
      - subscription
    profiles:
      - production

volumes:
  pg-data:
  redis-data:
  grafana-data:
  prometheus-data:
  zookeeper-data:
  zookeeper-secrets:
  zookeeper-log:
  kafka-data:
  kafka-secrets:

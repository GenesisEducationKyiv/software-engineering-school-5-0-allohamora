// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: subscription.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { CallContext, CallOptions } from "nice-grpc-common";
import { Empty } from "./google/protobuf/empty.js";
import { Timestamp } from "./google/protobuf/timestamp.js";

export const protobufPackage = "subscription";

export enum Frequency {
  /** Unspecified - https://protobuf.dev/best-practices/dos-donts/#unspecified-enum */
  Unspecified = 0,
  Hourly = 1,
  Daily = 2,
  UNRECOGNIZED = -1,
}

export function frequencyFromJSON(object: any): Frequency {
  switch (object) {
    case 0:
    case "Unspecified":
      return Frequency.Unspecified;
    case 1:
    case "Hourly":
      return Frequency.Hourly;
    case 2:
    case "Daily":
      return Frequency.Daily;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Frequency.UNRECOGNIZED;
  }
}

export function frequencyToJSON(object: Frequency): string {
  switch (object) {
    case Frequency.Unspecified:
      return "Unspecified";
    case Frequency.Hourly:
      return "Hourly";
    case Frequency.Daily:
      return "Daily";
    case Frequency.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Subscription {
  id: string;
  email: string;
  city: string;
  frequency: Frequency;
  createdAt: Date | undefined;
}

export interface SubscribeRequest {
  email: string;
  city: string;
  frequency: Frequency;
}

export interface SubscribeResponse {
  message: string;
}

export interface ConfirmRequest {
  token: string;
}

export interface ConfirmResponse {
  message: string;
}

export interface UnsubscribeRequest {
  token: string;
}

export interface UnsubscribeResponse {
  message: string;
}

export interface HandleSubscriptionsRequest {
  frequency: Frequency;
}

function createBaseSubscription(): Subscription {
  return { id: "", email: "", city: "", frequency: 0, createdAt: undefined };
}

export const Subscription: MessageFns<Subscription> = {
  encode(message: Subscription, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.city !== "") {
      writer.uint32(26).string(message.city);
    }
    if (message.frequency !== 0) {
      writer.uint32(32).int32(message.frequency);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Subscription {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.frequency = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Subscription {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      frequency: isSet(object.frequency) ? frequencyFromJSON(object.frequency) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: Subscription): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.frequency !== 0) {
      obj.frequency = frequencyToJSON(message.frequency);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Subscription>): Subscription {
    return Subscription.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Subscription>): Subscription {
    const message = createBaseSubscription();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.city = object.city ?? "";
    message.frequency = object.frequency ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseSubscribeRequest(): SubscribeRequest {
  return { email: "", city: "", frequency: 0 };
}

export const SubscribeRequest: MessageFns<SubscribeRequest> = {
  encode(message: SubscribeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.city !== "") {
      writer.uint32(18).string(message.city);
    }
    if (message.frequency !== 0) {
      writer.uint32(24).int32(message.frequency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.frequency = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      frequency: isSet(object.frequency) ? frequencyFromJSON(object.frequency) : 0,
    };
  },

  toJSON(message: SubscribeRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.frequency !== 0) {
      obj.frequency = frequencyToJSON(message.frequency);
    }
    return obj;
  },

  create(base?: DeepPartial<SubscribeRequest>): SubscribeRequest {
    return SubscribeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscribeRequest>): SubscribeRequest {
    const message = createBaseSubscribeRequest();
    message.email = object.email ?? "";
    message.city = object.city ?? "";
    message.frequency = object.frequency ?? 0;
    return message;
  },
};

function createBaseSubscribeResponse(): SubscribeResponse {
  return { message: "" };
}

export const SubscribeResponse: MessageFns<SubscribeResponse> = {
  encode(message: SubscribeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: SubscribeResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<SubscribeResponse>): SubscribeResponse {
    return SubscribeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscribeResponse>): SubscribeResponse {
    const message = createBaseSubscribeResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseConfirmRequest(): ConfirmRequest {
  return { token: "" };
}

export const ConfirmRequest: MessageFns<ConfirmRequest> = {
  encode(message: ConfirmRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfirmRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfirmRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfirmRequest {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: ConfirmRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create(base?: DeepPartial<ConfirmRequest>): ConfirmRequest {
    return ConfirmRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConfirmRequest>): ConfirmRequest {
    const message = createBaseConfirmRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseConfirmResponse(): ConfirmResponse {
  return { message: "" };
}

export const ConfirmResponse: MessageFns<ConfirmResponse> = {
  encode(message: ConfirmResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfirmResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfirmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfirmResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: ConfirmResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<ConfirmResponse>): ConfirmResponse {
    return ConfirmResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConfirmResponse>): ConfirmResponse {
    const message = createBaseConfirmResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseUnsubscribeRequest(): UnsubscribeRequest {
  return { token: "" };
}

export const UnsubscribeRequest: MessageFns<UnsubscribeRequest> = {
  encode(message: UnsubscribeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnsubscribeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnsubscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnsubscribeRequest {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: UnsubscribeRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create(base?: DeepPartial<UnsubscribeRequest>): UnsubscribeRequest {
    return UnsubscribeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnsubscribeRequest>): UnsubscribeRequest {
    const message = createBaseUnsubscribeRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseUnsubscribeResponse(): UnsubscribeResponse {
  return { message: "" };
}

export const UnsubscribeResponse: MessageFns<UnsubscribeResponse> = {
  encode(message: UnsubscribeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnsubscribeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnsubscribeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnsubscribeResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: UnsubscribeResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<UnsubscribeResponse>): UnsubscribeResponse {
    return UnsubscribeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnsubscribeResponse>): UnsubscribeResponse {
    const message = createBaseUnsubscribeResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseHandleSubscriptionsRequest(): HandleSubscriptionsRequest {
  return { frequency: 0 };
}

export const HandleSubscriptionsRequest: MessageFns<HandleSubscriptionsRequest> = {
  encode(message: HandleSubscriptionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.frequency !== 0) {
      writer.uint32(8).int32(message.frequency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandleSubscriptionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandleSubscriptionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.frequency = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HandleSubscriptionsRequest {
    return { frequency: isSet(object.frequency) ? frequencyFromJSON(object.frequency) : 0 };
  },

  toJSON(message: HandleSubscriptionsRequest): unknown {
    const obj: any = {};
    if (message.frequency !== 0) {
      obj.frequency = frequencyToJSON(message.frequency);
    }
    return obj;
  },

  create(base?: DeepPartial<HandleSubscriptionsRequest>): HandleSubscriptionsRequest {
    return HandleSubscriptionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HandleSubscriptionsRequest>): HandleSubscriptionsRequest {
    const message = createBaseHandleSubscriptionsRequest();
    message.frequency = object.frequency ?? 0;
    return message;
  },
};

export type SubscriptionServiceDefinition = typeof SubscriptionServiceDefinition;
export const SubscriptionServiceDefinition = {
  name: "SubscriptionService",
  fullName: "subscription.SubscriptionService",
  methods: {
    subscribe: {
      name: "Subscribe",
      requestType: SubscribeRequest,
      requestStream: false,
      responseType: SubscribeResponse,
      responseStream: false,
      options: {},
    },
    confirm: {
      name: "Confirm",
      requestType: ConfirmRequest,
      requestStream: false,
      responseType: ConfirmResponse,
      responseStream: false,
      options: {},
    },
    unsubscribe: {
      name: "Unsubscribe",
      requestType: UnsubscribeRequest,
      requestStream: false,
      responseType: UnsubscribeResponse,
      responseStream: false,
      options: {},
    },
    handleSubscriptions: {
      name: "HandleSubscriptions",
      requestType: HandleSubscriptionsRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface SubscriptionServiceImplementation<CallContextExt = {}> {
  subscribe(request: SubscribeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SubscribeResponse>>;
  confirm(request: ConfirmRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ConfirmResponse>>;
  unsubscribe(
    request: UnsubscribeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UnsubscribeResponse>>;
  handleSubscriptions(
    request: HandleSubscriptionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface SubscriptionServiceClient<CallOptionsExt = {}> {
  subscribe(request: DeepPartial<SubscribeRequest>, options?: CallOptions & CallOptionsExt): Promise<SubscribeResponse>;
  confirm(request: DeepPartial<ConfirmRequest>, options?: CallOptions & CallOptionsExt): Promise<ConfirmResponse>;
  unsubscribe(
    request: DeepPartial<UnsubscribeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UnsubscribeResponse>;
  handleSubscriptions(
    request: DeepPartial<HandleSubscriptionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}

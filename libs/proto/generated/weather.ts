// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: weather.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { CallContext, CallOptions } from "nice-grpc-common";

export const protobufPackage = "weather";

export interface Weather {
  /** Temperature in Celsius */
  temperature: number;
  /** Humidity percentage */
  humidity: number;
  /** Weather description (e.g., "Sunny") */
  description: string;
}

export interface GetWeatherRequest {
  city: string;
}

export interface GetWeatherResponse {
  weather: Weather | undefined;
}

export interface ValidateCityRequest {
  city: string;
}

export interface ValidateCityResponse {
  isValid: boolean;
}

function createBaseWeather(): Weather {
  return { temperature: 0, humidity: 0, description: "" };
}

export const Weather: MessageFns<Weather> = {
  encode(message: Weather, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.temperature !== 0) {
      writer.uint32(9).double(message.temperature);
    }
    if (message.humidity !== 0) {
      writer.uint32(17).double(message.humidity);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Weather {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeather();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.temperature = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.humidity = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Weather {
    return {
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : 0,
      humidity: isSet(object.humidity) ? globalThis.Number(object.humidity) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: Weather): unknown {
    const obj: any = {};
    if (message.temperature !== 0) {
      obj.temperature = message.temperature;
    }
    if (message.humidity !== 0) {
      obj.humidity = message.humidity;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<Weather>): Weather {
    return Weather.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Weather>): Weather {
    const message = createBaseWeather();
    message.temperature = object.temperature ?? 0;
    message.humidity = object.humidity ?? 0;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseGetWeatherRequest(): GetWeatherRequest {
  return { city: "" };
}

export const GetWeatherRequest: MessageFns<GetWeatherRequest> = {
  encode(message: GetWeatherRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.city !== "") {
      writer.uint32(10).string(message.city);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWeatherRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWeatherRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.city = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWeatherRequest {
    return { city: isSet(object.city) ? globalThis.String(object.city) : "" };
  },

  toJSON(message: GetWeatherRequest): unknown {
    const obj: any = {};
    if (message.city !== "") {
      obj.city = message.city;
    }
    return obj;
  },

  create(base?: DeepPartial<GetWeatherRequest>): GetWeatherRequest {
    return GetWeatherRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWeatherRequest>): GetWeatherRequest {
    const message = createBaseGetWeatherRequest();
    message.city = object.city ?? "";
    return message;
  },
};

function createBaseGetWeatherResponse(): GetWeatherResponse {
  return { weather: undefined };
}

export const GetWeatherResponse: MessageFns<GetWeatherResponse> = {
  encode(message: GetWeatherResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.weather !== undefined) {
      Weather.encode(message.weather, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWeatherResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWeatherResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.weather = Weather.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWeatherResponse {
    return { weather: isSet(object.weather) ? Weather.fromJSON(object.weather) : undefined };
  },

  toJSON(message: GetWeatherResponse): unknown {
    const obj: any = {};
    if (message.weather !== undefined) {
      obj.weather = Weather.toJSON(message.weather);
    }
    return obj;
  },

  create(base?: DeepPartial<GetWeatherResponse>): GetWeatherResponse {
    return GetWeatherResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWeatherResponse>): GetWeatherResponse {
    const message = createBaseGetWeatherResponse();
    message.weather = (object.weather !== undefined && object.weather !== null)
      ? Weather.fromPartial(object.weather)
      : undefined;
    return message;
  },
};

function createBaseValidateCityRequest(): ValidateCityRequest {
  return { city: "" };
}

export const ValidateCityRequest: MessageFns<ValidateCityRequest> = {
  encode(message: ValidateCityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.city !== "") {
      writer.uint32(10).string(message.city);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateCityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateCityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.city = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateCityRequest {
    return { city: isSet(object.city) ? globalThis.String(object.city) : "" };
  },

  toJSON(message: ValidateCityRequest): unknown {
    const obj: any = {};
    if (message.city !== "") {
      obj.city = message.city;
    }
    return obj;
  },

  create(base?: DeepPartial<ValidateCityRequest>): ValidateCityRequest {
    return ValidateCityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateCityRequest>): ValidateCityRequest {
    const message = createBaseValidateCityRequest();
    message.city = object.city ?? "";
    return message;
  },
};

function createBaseValidateCityResponse(): ValidateCityResponse {
  return { isValid: false };
}

export const ValidateCityResponse: MessageFns<ValidateCityResponse> = {
  encode(message: ValidateCityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isValid !== false) {
      writer.uint32(8).bool(message.isValid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateCityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateCityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isValid = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateCityResponse {
    return { isValid: isSet(object.isValid) ? globalThis.Boolean(object.isValid) : false };
  },

  toJSON(message: ValidateCityResponse): unknown {
    const obj: any = {};
    if (message.isValid !== false) {
      obj.isValid = message.isValid;
    }
    return obj;
  },

  create(base?: DeepPartial<ValidateCityResponse>): ValidateCityResponse {
    return ValidateCityResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateCityResponse>): ValidateCityResponse {
    const message = createBaseValidateCityResponse();
    message.isValid = object.isValid ?? false;
    return message;
  },
};

export type WeatherServiceDefinition = typeof WeatherServiceDefinition;
export const WeatherServiceDefinition = {
  name: "WeatherService",
  fullName: "weather.WeatherService",
  methods: {
    getWeather: {
      name: "GetWeather",
      requestType: GetWeatherRequest,
      requestStream: false,
      responseType: GetWeatherResponse,
      responseStream: false,
      options: {},
    },
    validateCity: {
      name: "ValidateCity",
      requestType: ValidateCityRequest,
      requestStream: false,
      responseType: ValidateCityResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface WeatherServiceImplementation<CallContextExt = {}> {
  getWeather(
    request: GetWeatherRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetWeatherResponse>>;
  validateCity(
    request: ValidateCityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ValidateCityResponse>>;
}

export interface WeatherServiceClient<CallOptionsExt = {}> {
  getWeather(
    request: DeepPartial<GetWeatherRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetWeatherResponse>;
  validateCity(
    request: DeepPartial<ValidateCityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ValidateCityResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
